import 'dart:convert';
import 'dart:convert' show utf8;
import 'package:dart_frog/dart_frog.dart';
import 'package:http/http.dart' as http;

Future<Response> onRequest(RequestContext context) async {
  // üîß CORS preflight
 if (context.request.method == HttpMethod.options) {
  return Response(
    statusCode: 204,
    headers: {
      'Access-Control-Allow-Origin': '*',
      'Access-Control-Allow-Methods': 'POST, OPTIONS',
      'Access-Control-Allow-Headers': 'Content-Type',
    },
  );
}


  final body = await context.request.body();
  final data = jsonDecode(body);
  final subject = data['subject'];
  final topic = data['topic'];

  final prompt = '''
Tu es un expert des examens du bac finlandais. G√©n√®re une question de YO-Koe (baccalaur√©at) en "$subject" inspir√©e de l'examen de l'ann√©e "$topic".NB: tu ne fais rien que t'inspir√© des examens ultrieurs. ecrit juste ce que je t'ai demand√© d'ecrire, rien d'autre. 
Corrige tous les caract√®res mal encod√©s pour qu'ils soient lisibles par un humain (par exemple, "√É¬§" devient "√§").Si le cours est une langue, ne pause pas de question d'ecoute.

R√©ponds uniquement en JSON :
{
  "question": "...",
  "level": "...",
  "difficulty": "...",
  "solution": "...",
  "steps": "..."
}
Tu dois absolument r√©pondre en **finnois**.
''';

  // üîÅ Appel OpenAI
  final response = await http.post(
    Uri.parse('https://api.openai.com/v1/chat/completions'),
    headers: {
      'Content-Type': 'application/json',
      'Authorization': 'Bearer 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',
    },
    body: jsonEncode({
      'model': 'gpt-4',
      'messages': [
        {'role': 'system', 'content': "Tu es un g√©n√©rateur d'examens YO."},
        {'role': 'user', 'content': prompt},
      ],
      'temperature': 0.8,
    }),
  );

  // üß† Lecture avec encodage UTF-8 pour corriger caract√®res sp√©ciaux
  final utf8Content = utf8.decode(response.bodyBytes);

  try {
    final parsed = jsonDecode(jsonDecode(utf8Content)['choices'][0]['message']['content']);

    return Response.json(
  body: parsed,
  headers: {
    'Access-Control-Allow-Origin': '*',
    'Access-Control-Allow-Headers': '*',
    'Access-Control-Allow-Methods': '*',
  },
);

  } catch (e) {
    return Response.json(
      statusCode: 500,
      body: {
        'error': "‚ùå Erreur de parsing JSON.",
        'raw': utf8Content,
        'details': e.toString(),
      },
      headers: {'Access-Control-Allow-Origin': '*'},
    );
  }
}
